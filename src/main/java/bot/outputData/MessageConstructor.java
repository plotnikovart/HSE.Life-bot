package bot.outputData;

import bot.database.EnumTable;
import bot.inputData.Event;
import org.telegram.telegraph.ExecutorOptions;
import org.telegram.telegraph.TelegraphContext;
import org.telegram.telegraph.TelegraphContextInitializer;
import org.telegram.telegraph.TelegraphLogger;
import org.telegram.telegraph.api.methods.*;
import org.telegram.telegraph.api.objects.*;
import org.telegram.telegraph.exceptions.TelegraphException;

import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;

/**
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
 */
public class MessageConstructor
{
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegraph.Api –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ Telegraph
     * @throws TelegraphException –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
     */
    public static void initialize() throws TelegraphException
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        TelegraphLogger.setLevel(Level.ALL);
        TelegraphLogger.registerLogger(new ConsoleHandler());
        TelegraphContextInitializer.init();
        TelegraphContext.registerInstance(ExecutorOptions.class, new ExecutorOptions());

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        account = new CreateAccount("hse.life")
                .setAuthorName("HSE.Life")
                .setAuthorUrl("https://t.me/hse_life")
                .execute();
    }

    /**
     * –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—å—é Telegraph –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param priorityEvents   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param otherEvents      –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @return –ì–æ—Ç–æ–≤–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    static String generateMessage(LinkedList<Event> priorityEvents, LinkedList<Event> otherEvents)
    {
        StringBuilder messageText = new StringBuilder("*[HSEvents]*\n\n");

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if (priorityEvents != null && priorityEvents.size() != 0)
        {
            int i = 1;
            messageText.append("*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n");

            for (Event event : priorityEvents)
            {
                messageText.append(i).append(". ").append(event.getName()).append('\n');
                i++;
            }

            messageText.append('\n');
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if (otherEvents != null && otherEvents.size() != 0)
        {
            int i = 1;
            messageText.append("*–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n");

            for (Event event : otherEvents)
            {
                messageText.append(i).append(". ").append(event.getName()).append('\n');
                i++;
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
        String articleReference = generateArticle(priorityEvents, otherEvents);
        messageText.append("\n").append(articleReference);

        return messageText.toString();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–æ–∫. –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—å—é –≤ Telegraph
     * @param priorityEvents –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param otherEvents    –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @return –°—Å—ã–ª–∫–∞ –Ω–∞ Telegraph —Å—Ç–∞—Ç—å—é
     */
    private static String generateArticle(LinkedList<Event> priorityEvents, LinkedList<Event> otherEvents)
    {
        try
        {
            List<Node> allContent = new LinkedList<>();     // –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Telegraph

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –Ω–∞—á–∞–ª–æ –ø–æ–¥–±–æ—Ä–∫–∏
            String everydayImage = EnumTable.getEverydayImage();
            allContent.add(addImage(everydayImage));

            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if (priorityEvents != null && priorityEvents.size() != 0)
            {
                int i = 1;
                allContent.add(addNodeContent("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "h3"));

                for (Event event : priorityEvents)
                {
                    addEvent(i, event, allContent);
                    i++;
                }

                allContent.add(addNodeContent(null, "hr"));
            }

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if (otherEvents != null && otherEvents.size() != 0)
            {
                int i = 1;
                allContent.add(addNodeContent("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "h3"));

                for (Event event : otherEvents)
                {
                    addEvent(i, event, allContent);
                    i++;
                }
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            Calendar c = Calendar.getInstance();
            c.setTime(new Date());
            int day = c.get(Calendar.DAY_OF_WEEK);

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Telegraph
            Page page = new CreatePage(account.getAccessToken(), dayOfWeek[day], allContent)
                    .setAuthorName("HSE.Life")
                    .setAuthorUrl("https://t.me/hse_life")
                    .execute();

            return page.getUrl();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ø–æ–¥–±–æ—Ä–∫—É
     * @param eventNumber –ù–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param event       –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
     * @param allContent  –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–±–æ—Ä–∫–∏
     */
    private static void addEvent(int eventNumber, Event event, List<Node> allContent)
    {
        String[] params = event.getEventParams();

        // –ù–∞–∑–≤–∞–Ω–∏–µ
        allContent.add(addNodeContent(eventNumber + ". " + params[0], "h4"));

        // –û–ø–∏—Å–∞–Ω–∏–µ
        allContent.add(addNodeContent(params[1], "p"));

        // –°—Å—ã–ª–∫–∞
        allContent.add(addUrl(params[5]));

        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        allContent.add(addNodeContent(null, "br"));

        // –î–∞—Ç–∞
        try
        {
            Date date = new SimpleDateFormat("yyyy-mm-dd").parse(params[6]);
            allContent.add(addNodeContent("üìÜ " + dateFormat.format(date), "p"));
        }
        catch (ParseException e)
        {
            e.printStackTrace();
        }

        // –í—Ä–µ–º—è
        if (params[7] != null)
        {
            allContent.add(addNodeContent("\uD83D\uDD54 " + params[7].substring(0, 5), "p"));
        }

        // –ú–µ—Å—Ç–æ
        if (params[8] != null)
        {
            allContent.add(addNodeContent("\uD83D\uDCCD " + params[8], "p"));
        }

        // –§–æ—Ç–æ
        allContent.add(addImage(params[4]));
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª —Å—Ç–∞—Ç—å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–≥–æ–º
     * @param text –¢–µ–∫—Å—Ç —É–∑–ª–∞
     * @param tag  –¢–µ–≥
     * @return –£–∑–µ–ª
     */
    private static Node addNodeContent(String text, String tag)
    {
        List<Node> tagContent = null;
        if (text != null)
        {
            tagContent = new ArrayList<>();
            Node textNode = new NodeText(text);
            tagContent.add(textNode);
        }

        return new NodeElement(tag, null, tagContent);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª —Å—Ç–∞—Ç—å–∏, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫ –Ω–µ–º—É —Å—Å—ã–ª–∫—É
     * @param url –°—Å—ã–ª–∫–∞
     * @return –£–∑–µ–ª
     */
    private static Node addUrl(String url)
    {
        List<Node> tagContent = new ArrayList<>();
        Node textNode = new NodeText("–ü–æ–¥—Ä–æ–±–Ω–µ–µ");
        tagContent.add(textNode);

        HashMap<String, String> map = new HashMap<>(1);
        map.put("href", url);

        return new NodeElement("a", map, tagContent);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª —Å—Ç–∞—Ç—å–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
     * @param url –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
     * @return –£–∑–µ–ª
     */
    private static Node addImage(String url)
    {
        HashMap<String, String> map = new HashMap<>(1);
        map.put("src", url);
        return new NodeElement("img", map, null);
    }


    private static Account account;     // –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ Telegraph

    // –§–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–µ–≤
    private static SimpleDateFormat dateFormat = new SimpleDateFormat("d MMMM", new DateFormatSymbols()
    {
        @Override
        public String[] getMonths()
        {
            return new String[] {"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                                 "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"};
        }
    });

    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    private static String[] dayOfWeek = {"", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞",
                                         "–°—É–±–±–æ—Ç–∞"};
}